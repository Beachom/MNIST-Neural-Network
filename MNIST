{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-28T08:21:28.659259Z\",\"iopub.execute_input\":\"2024-04-28T08:21:28.659782Z\",\"iopub.status.idle\":\"2024-04-28T08:21:28.666832Z\",\"shell.execute_reply.started\":\"2024-04-28T08:21:28.659723Z\",\"shell.execute_reply\":\"2024-04-28T08:21:28.665353Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-28T08:21:28.669208Z\",\"iopub.execute_input\":\"2024-04-28T08:21:28.669810Z\",\"iopub.status.idle\":\"2024-04-28T08:21:32.006687Z\",\"shell.execute_reply.started\":\"2024-04-28T08:21:28.669769Z\",\"shell.execute_reply\":\"2024-04-28T08:21:32.005255Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndata = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-28T08:21:32.008110Z\",\"iopub.execute_input\":\"2024-04-28T08:21:32.008459Z\",\"iopub.status.idle\":\"2024-04-28T08:21:32.031059Z\",\"shell.execute_reply.started\":\"2024-04-28T08:21:32.008428Z\",\"shell.execute_reply\":\"2024-04-28T08:21:32.029472Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndata.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-28T08:21:32.032440Z\",\"iopub.execute_input\":\"2024-04-28T08:21:32.032789Z\",\"iopub.status.idle\":\"2024-04-28T08:21:32.794959Z\",\"shell.execute_reply.started\":\"2024-04-28T08:21:32.032735Z\",\"shell.execute_reply\":\"2024-04-28T08:21:32.793572Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndata = np.array(data)\nm, n = data.shape\nnp.random.shuffle(data)\n\ndata_dev = data[0:1000].T\nY_dev = data_dev[0]\nX_dev = data_dev[1:n]\n\ndata_train = data[100:m].T\nY_train = data_train[0]\nX_train = data_train[1:n]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-28T08:21:32.797966Z\",\"iopub.execute_input\":\"2024-04-28T08:21:32.798373Z\",\"iopub.status.idle\":\"2024-04-28T08:21:32.813210Z\",\"shell.execute_reply.started\":\"2024-04-28T08:21:32.798340Z\",\"shell.execute_reply\":\"2024-04-28T08:21:32.812250Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndef init_params():\n    W1 = np.random.rand(10, 784) - 0.5\n    b1 = np.random.rand(10, 1) - 0.5\n    W2 = np.random.rand(10, 10) - 0.5\n    b2 = np.random.rand(10, 1) - 0.5\n    return W1, b1, W2, b2\n\ndef ReLU(Z):\n    return np.maximum(Z, 0)\n\ndef softmax(Z):\n    A = np.exp(Z) / sum(np.exp(Z))\n    return A\n    \ndef forward_prop(W1, b1, W2, b2, X):\n    Z1 = W1.dot(X) + b1\n    A1 = ReLU(Z1)\n    Z2 = W2.dot(A1) + b2\n    A2 = softmax(Z2)\n    return Z1, A1, Z2, A2\n\ndef ReLU_deriv(Z):\n    return Z > 0\n\ndef one_hot(Y):\n    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n    one_hot_Y[np.arange(Y.size), Y] = 1\n    one_hot_Y = one_hot_Y.T\n    return one_hot_Y\n\ndef backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n    one_hot_Y = one_hot(Y)\n    dZ2 = A2 - one_hot_Y\n    dW2 = 1 / m * dZ2.dot(A1.T)\n    db2 = 1 / m * np.sum(dZ2)\n    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n    dW1 = 1 / m * dZ1.dot(X.T)\n    db1 = 1 / m * np.sum(dZ1)\n    return dW1, db1, dW2, db2\n\ndef update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n    W1 = W1 - alpha * dW1\n    b1 = b1 - alpha * db1    \n    W2 = W2 - alpha * dW2  \n    b2 = b2 - alpha * db2    \n    return W1, b1, W2, b2\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-28T08:21:32.814468Z\",\"iopub.execute_input\":\"2024-04-28T08:21:32.814855Z\",\"iopub.status.idle\":\"2024-04-28T08:21:32.830007Z\",\"shell.execute_reply.started\":\"2024-04-28T08:21:32.814823Z\",\"shell.execute_reply\":\"2024-04-28T08:21:32.828930Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndef get_predictions(A2):\n    return np.argmax(A2, 0)\n\ndef get_accuracy(predictions, Y):\n    print(predictions, Y)\n    return np.sum(predictions == Y) / Y.size\n\ndef gradient_descent(X, Y, alpha, iterations):\n    W1, b1, W2, b2 = init_params()\n    for i in range(iterations):\n        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n        if i % 10 == 0:\n            print(\"Iteration: \", i)\n            predictions = get_predictions(A2)\n            print(get_accuracy(predictions, Y))\n    return W1, b1, W2, b2\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-28T08:21:32.831152Z\",\"iopub.execute_input\":\"2024-04-28T08:21:32.831459Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nW1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 500)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n","metadata":{"_uuid":"c056edb8-0707-46dd-b76d-3624d4df6366","_cell_guid":"4d69b22d-6d96-449a-bc24-7e537dee45de","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}